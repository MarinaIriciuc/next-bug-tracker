generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ColumnEnum {
  todo
  in_progress
  done
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // responsible   User?     @relation("ProjectResponsible", fields: [responsibleId], references: [id])
  // responsibleId Int?
  // createdBy     User   @relation("ProjectCreator", fields: [createdById], references: [id])
  // createdById   Int
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String?
  description String?
  status      String     @default("in progress")
  priority    String
  deadline    String
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columnId    ColumnEnum @default(todo)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // assignedTo   User?    @relation("TaskAssignee", fields: [assignedToId], references: [id])
  // assignedToId Int?
  // createdBy  User      @relation("TaskCreator", fields: [createdById], references: [id])
  // createdById  Int
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.Text
  username      String?   @db.Text
  firstName     String?   @db.Text
  lastName      String?   @db.Text
  password      String?   @db.Text
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}
